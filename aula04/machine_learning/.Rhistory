library(readxl)
dados <- read_excel("Dados_regressao (2).xlsx")
dados
library(neuralnet)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
library(neuralnet)
dadosNormalizados <- data.frame(lapply(dados[, -3]), normalize)
dadosNormalizados
library(neuralnet)
dadosNormalizados <- data.frame(lapply(dados[, -3]), fun = normalize)
dadosNormalizados
library(neuralnet)
dadosNormalizados <- data.frame(lapply(dados[, -3]), normalize))
dadosNormalizados
library(neuralnet)
dadosNormalizados <- data.frame(lapply(dados[, -3], normalize))
dadosNormalizados
library(neuralnet)
dadosNormalizados <- data.frame(lapply(dados[, -3], normalize))
dadosNormalizados$Volume <- dados$Volume
dadosNormalizados
?neuralnet
library(neuralnet)
rna <- neuralnet(Volume ~ DAP + Altura,
data = dadosNormalizados,
hidden = c(5),
act.fct = "logistic",
linear.output = TRUE,
algorithm = "rprop+",
threshold = 0.0001,
stepmax = 1e+06)
plot(rna)
plot(rna)
library(neuralnet)
rna <- neuralnet(Volume ~ DAP + Altura,
data = dadosNormalizados,
hidden = c(4, 4, 2),
act.fct = "logistic",
linear.output = TRUE,
algorithm = "rprop+",
threshold = 0.000001,
stepmax = 1e+06)
plot(rna)
plot(rna)
library(neuralnet)
rna <- neuralnet(Volume ~ DAP + Altura,
data = dadosNormalizados,
hidden = c(4, 4, 2),
act.fct = "logistic",
linear.output = TRUE,
algorithm = "rprop+",
threshold = 0.0001,
stepmax = 1e+06)
plot(rna)
volumesEstimados <- as.data.frame(rna$net.result)
plot(dados$Volume, volumesEstimados)
volumesEstimados <- as.data.frame(rna$net.result)
class(volumesEstimados)
plot(dados$Volume, volumesEstimados)
volumesEstimados <- rna$net.result
plot(dados$Volume, volumesEstimados)
volumesEstimados <- rna$net.result
plot(dados$Volume, volumesEstimados)
dados$volumeEstimado <- rna$net.result
plot(dados$Volume, dados$volumesEstimados)
dados$volumeEstimado <- rna$net.result
class(rna$net.result)
plot(dados$Volume, dados$volumesEstimados)
dados$volumeEstimado <- as.double(rna$net.result)
plot(dados$Volume, dados$volumesEstimados)
View(dados)
dados$volumeEstimado <- as.data.frame(rna$net.result)[, 1]
plot(dados$Volume, dados$volumesEstimados)
View(dados)
View(dados)
volumeEstimado <- as.data.frame(rna$net.result)[, 1]
plot(dados$Volume, volumesEstimados)
dados$volumeEstimado <- as.data.frame(rna$net.result)[, 1]
plot(dados$Volume, dados$volumesEstimados)
dados$volumeEstimado <- as.data.frame(rna$net.result)
plot(dados$Volume, dados$volumesEstimados)
View(dados)
dados$volumeEstimado <- as.data.frame(rna$net.result)
plot(dados$Volume, dados$volumesEstimado)
dados$volumeEstimado <- as.data.frame(rna$net.result)
plot(dados$Volume, dados$volumeEstimado)
View(dados)
dados$volumeEstimado <- as.data.frame(rna$net.result)
plot(dados$Volume, dados$volumeEstimado)
View(dados)
dados$volumeEstimado <- as.data.frame(rna$net.result)[0]
plot(dados$Volume, dados$volumeEstimado)
dadosNormalizados$volumeEstimado <- as.data.frame(rna$net.result)
plot(dadosNormalizados$Volume, dadosNormalizados$volumeEstimado)
View(dadosNormalizados)
View(dados)
dados$volumeEstimado <- as.data.frame(rna$net.result)
plot(dados$Volume, dados$volumeEstimado)
View(dados)
dados$volumeEstimado <- as.data.frame(rna$net.result)
colnames(dados)
plot(dados$Volume, dados$volumeEstimado)
dados$volumeEstimado <- as.data.frame(rna$net.result)
dados
#plot(dados$Volume, dados$volumeEstimado)
dados$volumeEstimado <- as.double(rna$net.result)
dados
#plot(dados$Volume, dados$volumeEstimado)
dados$volumeEstimado <- as.double(rna$net.result)
dados
#plot(dados$Volume, dados$volumeEstimado)
dados$volumeEstimado <- as.double(as.data.frame(rna$net.result))
dados
#plot(dados$Volume, dados$volumeEstimado)
dados$volumeEstimado <- as.data.frame(rna$net.result)[1]
dados
#plot(dados$Volume, dados$volumeEstimado)
dados$volumeEstimado <- as.data.frame(rna$net.result)[,1]
dados
#plot(dados$Volume, dados$volumeEstimado)
dados$volumeEstimado <- as.data.frame(rna$net.result)[,1]
dados
plot(dados$Volume, dados$volumeEstimado)
dados$volumeEstimado <- as.data.frame(rna$net.result)[,1]
dados
plot(dados$Volume, dados$volumeEstimado, xlab = "Volumes observados", ylab = "Volumes estimados")
volumeEstimado <- as.data.frame(rna$net.result)[,1]
plot(dados$Volume, volumeEstimado, xlab = "Volumes observados", ylab = "Volumes estimados")
desvios <- dados$Volume - volumeEstimado
desvios
desvios <- dados$Volume - volumeEstimado
desvios
sum(desvios)
sd(desvios)
shapiro.test(desvios)
volumeEstimado <- as.data.frame(rna$net.result)[,1]
plot(dados$Volume, volumeEstimado, xlab = "Volumes observados", ylab = "Volumes estimados")
lines(x = c(0, 100), y = c(0, 100), col = "blue")
desvios <- dados$Volume - volumeEstimado
sum(desvios)
sd(desvios)
shapiro.test(desvios)
library(lmtest)
gqtest(desvios)
desvios <- dados$Volume - volumeEstimado
sum(desvios)
sd(desvios)
shapiro.test(desvios)
library(lmtest)
gqtest(desvios ~ dados$Volume)
desvios <- dados$Volume - volumeEstimado
sum(desvios)
sd(desvios)
shapiro.test(desvios)
library(lmtest)
gqtest(desvios ~ dados$Volume)
par(mfrow = c(1, 2))
hist(desvios)
boxplot(desvios)
library(readxl)
dados <- read_excel("Dados_regressao (2).xlsx")
View(dados)
View(dados)
View(dados)
library(readxl)
dados <- read_excel("Dados_regressao (2).xlsx")
dados
library(e1071)
modeloSVM <- svm(dados$Volume ~ dados$DAP + dados$Altura,
type = "eps-regression",
kernel = "radial")
summary(modeloSVM)
library(e1071)
modeloSVM <- svm(dados$Volume ~ dados$DAP + dados$Altura)
summary(modeloSVM)
volumeEstimado <- predict(modeloSVM, dados[, -3])
volumeEstimado
volumeEstimado <- predict(modeloSVM)
volumeEstimado
plot(dados$Volume, volumeEstimado, xlab = "Volume observado", ylab = "Volume estimado")
plot(dados$Volume, volumeEstimado, xlab = "Volume observado", ylab = "Volume estimado")
lines(x = c(0, 1000), y = c(0, 1000), col = "red")
desvios <- dados$Volume - volumeEstimado
sum(desvios)
sd(desvios)
shapiro.test(desvios)
library(lmtest)
gqtest(desvios ~ dados$volume)
par(mfrow = c(1, 2))
hist(desvios)
boxplot(desvios)
desvios <- dados$Volume - volumeEstimado
sum(desvios)
sd(desvios)
shapiro.test(desvios)
library(lmtest)
gqtest(desvios ~ dados$Volume)
par(mfrow = c(1, 2))
hist(desvios)
boxplot(desvios)
# Random Forest
library(randomForest)
modeloRF <- randomForest(dados$Volume ~ dados$DAP + dados$Altura)
summary(modeloRF)
plot(modeloRF)
volumeEstimado <- predict(modeloRF)
plot(dados$Volume, volumeEstimado, xlab = "Volume observado", "Volume estimado")
volumeEstimado <- predict(modeloRF)
plot(dados$Volume, volumeEstimado, xlab = "Volume observado", ylab = "Volume estimado")
volumeEstimado <- predict(modeloRF)
plot(dados$Volume, volumeEstimado, xlab = "Volume observado", ylab = "Volume estimado")
lines(x = c(0, 1000), y = c(0, 1000), col = "red")
desvios <- dados$Volume - volumeEstimado
sum(desvios)
sd(desvios)
shapiro.test(desvios)
gqtest(desvios ~ dados$Volume)
desvios <- dados$Volume - volumeEstimado
sum(desvios)
sd(desvios)
shapiro.test(desvios)
gqtest(desvios ~ dados$Volume)
par(mfrow = c(1, 2))
hist(desvios)
boxplot(desvios)
